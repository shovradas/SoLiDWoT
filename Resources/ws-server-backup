/**
 * Web Socket Server
 */
var WebSocketServer = require('websocket').server;
var http = require('http');

var server = http.createServer(function(request, response) {
    console.log((new Date()) + ' Received request for ' + request.url);
    response.writeHead(404);
    response.end();
});

server.listen(11000, () => {
    console.log((new Date()) + ' Server is listening on port 11000');
});
 
wsServer = new WebSocketServer({
    httpServer: server,
    autoAcceptConnections: false
});
 
var connections = [];
wsServer.on('request', function(request) {    
    let conn = request.accept('echo-protocol', request.origin);
    console.log((new Date()) + ' Connection accepted.');
    
    connections[connections.length] = conn;

    conn.on('message', function(message) {
        console.log(message.utf8Data);        
    });

    conn.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });
});
/* ------ End: Web Socket Server ------ */

/**
 * Web Socket Client: Subscribes the POD
 */
const W3CWebSocket = require('websocket').w3cwebsocket;

process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;

var client = new W3CWebSocket('wss://localhost:8443/');
client.onerror = () => { console.log('Connection Error') };
client.onclose = () => { console.log('Client Closed') };
client.onopen  = () => {
    console.log('WebSocket Client Connected');    
    if (client.readyState === client.OPEN)
        client.send("sub https://user1.localhost:8443/public/control/sensor1.control.ttl");
};
client.onmessage = (e) => {
    if (typeof e.data === 'string' && e.data.startsWith("ack")) {
        console.log("Subscribed to POD [Message: '" + e.data + "']");
    }else if (typeof e.data === 'string' && e.data.startsWith("pub")) {
        console.log("Received Update: [Message'" + e.data + "']");

        /* Querying Updated resource from POD */
        let https = require('https');
        //process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
        let options = {
            "method": "GET",
            "hostname": "user1.localhost",
            "port": 8443,
            "path": "/public/control/sensor1.control.ttl"
        };

        let req = https.request(options, function (res) {
            let chunks = [];
            res.on("data", function (chunk) { chunks.push(chunk); });
            res.on("end", function () {
                let rbody = Buffer.concat(chunks);
                var str = rbody.toString();

                // console.log(str);
                // console.log("START: " + str.indexOf('"'));
                // console.log("END: " + (str.length-4));
                // var status = str.substring(str.indexOf('"')+1, str.length-4);
                // var msg = '{"id":1, "status":'+status+'}';
                // console.log(msg);

                // for(i in connections){
                //     connections[i].sendUTF(msg);
                // }

                var $rdf = require('rdflib');

                var myRDF = $rdf.Namespace("http://myvocab/title#");


                var uri = 'https://user1.localhost:8443/public/control/sensor1.control.ttl';
                var body = str;
                var mimeType = 'text/turtle';
                var store = $rdf.graph();

                try {
                    $rdf.parse(body, store, uri, mimeType);
                    
                    const sparqlQuery = 'SELECT ?status WHERE { <https://user1.localhost:8443/public/control/sensor1.control.ttl> <http://myvocab/title#status> ?status .}';
                    const query = $rdf.SPARQLToQuery(sparqlQuery, false, store);

                    store.query(query, function(result) {
                        console.log('query ran');
                        console.log(result);
                        console.log(result["?status"].value);

                        var msg = '{"id":1, "status":'+result["?status"].value+'}';
                        for(i in connections){
                            connections[i].sendUTF(msg);
                        }
                    });

                } catch (err) {
                    console.log(err)
                }

            });
        });
        req.end();
        ////////////////////////////////////
    }else{
        console.log("Could not Subscribe to POD");
    }
};